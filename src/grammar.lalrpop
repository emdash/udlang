// LALRPOP grammar for the VM front-end.
//
// Adapted from that found in the `amath` crate, with heavy additions.
// https://github.com/vpzomtrrfrt/amath/blob/master/src/grammar.lalrpop

use crate::ast;
use crate::ast::{Node, ExprNode, TypeNode, StmtNode};
use crate::ast::Builder;
use std::str::FromStr;


grammar(ast: &Builder);


// Program Entry Point
pub Program: ast::Program = {
    VersionDecl <Script>,
    VersionDecl <Library>
}


// This is hard-coded for now. Later on this will be used to
// disambiguate or warn about incompatible languge versions.
VersionDecl: ()
  = "version" "0.1-pre_mvp" ";";


// Scripts must declare their input and output types.
//
// Scripts cannot export type, value, or function definitions.
//
// The IO declarations divide the header from the body of a script.
//
// Side effects are allowed only within the script body.
Script: ast::Program
    = "script" <desc:Str> ";"
      <decls:Decl*>
      <i:InputDecl>
      <o:OutputDecl>
      <body:Statement*>
    => ast.script(desc, &decls, i, o, &body);


// Libraries may *not* contain IO declarations.
//
// Libraries must contain only type definitions, value definitions,
// function definitions, or exports declarations.
Library: ast::Program
    = "lib" <desc:Str> ";" <decls:LibDecl*>
    => ast.library(desc, &decls);


LibDecl: StmtNode = {
    Decl,
    Export
}


// Any statement which introduces lexical bindings is a "declaration".
Decl: StmtNode = {
    Import,
    FuncDef,
    ProcDef,
    TypeDef,
    Let,
}


// This is what is allowed in a "primary" statement context. A
// "primary" statement context is one of the following:
// - inside a block, before the yielding expression.
// - a script body.
pub Statement: StmtNode = {
    FuncDef,
    ProcDef,
    TypeDef,
    Effect,
    Let,
    EffectExpr,
    Iteration,
}


// Expression entry point.
pub Expr: ExprNode = {
    Block,
    SimpleExpr
}


// Type Entry Point
pub Type: TypeNode = TypeMaybe;


// Maybe type Union(a, b)
pub TypeMaybe: TypeNode = {
    // If we had a Sum type, it would go here, and would look like this.
    // <a:TypeExpr> "+" <b:TypeCons> => ast.sum(&[a, b]),
    <TypeUnion>   "?"              => ast.option(<>),
    TypeUnion,
}

pub TypeUnion: TypeNode = {
    "|" <TypeUnion> => <>,
    <a:TypeCons> "|" <b:TypeUnion> => ast.union(&[a, b]),
    TypeCons,
}


// Application of a type-level function: a type constructor.
pub TypeCons: TypeNode = {
    <cons:TypeCons> "<" <types:Comma<Type>> ">"
	=> Node::new(ast::TypeTag::TypeCons(cons, types.to_vec())),
    TypeTerm
}


// A primitive type, or a grouping of subtypes.
pub TypeTerm: TypeNode = {
    "Void"                      => ast.t_void.clone(),
    "Bool"                      => ast.t_bool.clone(),
    "Int"                       => ast.t_int.clone(),
    "Float"                     => ast.t_float.clone(),
    "Str"                       => ast.t_str.clone(),
    "Point"                     => ast.t_point.clone(),
    "Self"                      => ast.t_this.clone(),
    <TypeName>                  => ast.type_name(<>),
    <Record>                    => <>,
    "(" <Type> ")"              => <>,
    "<" <items:Comma<Type>> ">" => ast.tuple(&items),
    "[" <item:Type> "]"         => ast.t_list(item)
}


// Record types
pub Record: TypeNode
    = "{" <members:Semicolon<Member>> "}"
    => ast.record(&members);


// Any field in a record type.
pub Member: (&'input str, ast::Member) = {
    "field" <name:Id> ":" <t:Type>
	=> ast.field(name, t),
    "field?" <name:Id> ":" <t:Type>
	=> ast.opt_field(name, t),
    "method" <name:Id> <args:Arglist> "->" <ret:Type> "=" <body:Expr>
	=> ast.method(name, &args, ret, body),
    "const" <name:Id> ":" <t:Type> "=" <value:Expr>
	=> ast.static_val(name, t, value),
    "static" <name:Id> <args:Arglist> "->" <ret:Type> "=" <body:Expr>
	=> ast.static_method(name, &args, ret, body),
}


// Export some item from a library.
Export: StmtNode = {
    "export" <id:Id> ";"                => ast.export(id),
    "export" <t:TypeName> ";"           => ast.export(t),
    "export" <id:Id> "=" <val:Expr> ";" => ast.export_decl(ast.def(id, val)),
    "export" <fd:FuncDef>               => ast.export_decl(fd),
    "export" <pd:ProcDef>               => ast.export_decl(pd),
    "export" <td:TypeDef>               => ast.export_decl(td),
}


// Import a library, and / or items from a library.
Import: StmtNode
    = "import" <module:Id> <sel:("." <ImportSelector>)?> ";"
    => ast.import(module, sel);


// The different ways to select items from a library.
ImportSelector: ast::ImportSelector = {
    "_"                              => ast::ImportSelector::Itself,
    "*"                              => ast::ImportSelector::All,
    <item:Id>                        => ast.import_item(item),
    <item:Id> "as" <alias:Id>        => ast.import_alias(item, alias),
    <item:Id> "." <n:ImportSelector> => ast.import_nested(item, n),
    "{" <Comma<ImportSelector>> "}"  => ast.import_group(&<>)
}


// Syntactic sugar for defining a function returning a value.
FuncDef: StmtNode
    = "func" <name:Id> <args:Arglist> "->" <ret:Type> <body:Block>
    => ast.def(name, ast.lambda(&args, ret, body));


// Syntatic sugar for defining a function which returns no value.
ProcDef: StmtNode
    = "proc" <name:Id> <args:Arglist> <body:Block>
    => ast.def(name, ast.lambda(&args, ast.t_void.clone(), body));


InputDecl: TypeNode
    = "input" <Type> ";" => <>;

OutputDecl: TypeNode
    = "output" <Type> ";" => <>;


// Syntactic sugar for defining a template function.
//
// This is desugared to an extra function arg that is folded into the
// argument list, allowing `delegate` to be in-scope within the
// template's body.
//
// Templates can be called with the TemplateCall syntax, which
// consumes a trailing block. This allows defining library functions
// which feel like control structures.
TemplateDef: StmtNode
    = "template" <name:Id> <args:Arglist> "using" <delegate:Id> <body:Block>
    => ast.def(name, ast.template(&args, delegate, body));


// The only way to introduce a type binding
TypeDef: StmtNode
    = "type" <name:TypeName> ":" <t:Type> ";"
    => ast.typedef(name, t);


// Send a value downstream on the output channel.
Effect: StmtNode
    = "out" <value:Expr> ";"
    => ast.emit(value);


// Bind a name to a value.
Let: StmtNode
    = "let" <name:Id> "=" <value:Expr> ";"
    => ast.def(name, value);


// An expression evaluated for its side effects in a statement context.
//
// To keep the LALRPOP happy, this is a subset of expressions.
EffectExpr: StmtNode = {
    <Cond> => ast.expr_for_effect(<>),
    TemplateCall,
}


// Iterate over a collection.
Iteration: StmtNode = {
    "for" <name:Id> "in" <list:Expr> <body:Block>
	=> ast.list_iter(name, list, ast.expr_for_effect(body)),
    "for" "(" <key:Id> "," <value:Id> ")" "in" <map:Expr> <body:Block>
	=> ast.map_iter(key, value, map, ast.expr_for_effect(body))
}


// Any expression which is not a Block.
//
// Needed to avoid the abiguity of nesting blocks.
SimpleExpr: ExprNode = {
    Lambda,
    Cond,
    Logic,
}


// An if-else chain
Cond: ExprNode
    = "if"
      <first:CondClause>
      <rest:("elif" <CondClause>)*>
      <default:("else" <Block>)?>
    => {
        let mut clauses = vec!{first};
        clauses.extend(rest);
        ast.cond(clauses.as_slice(), default.unwrap_or(ast.void.clone()))
    }
;


// Single clause in an if-else chain
CondClause: (ExprNode, ExprNode)
    = "(" <pred: Expr> ")" <body: Block>
    => (pred, body);


// Single paramater in a function signature
Param: (&'input str, TypeNode)
    = <name:Id> ":" <t:Type>
    => (name, t);


// The argument list of a function signature
Arglist: Vec<(&'input str, TypeNode)>
    = "(" <args:Comma<Param>> ")"
    => args;


// An anonymous function expression.
Lambda: ExprNode
    = <args:Arglist> <ret:("->" <Type>)?> "=" <body:Expr>
    => ast.lambda(
	&args,
	ret.unwrap_or(ast.t_void.clone()),
	body
    );


// A sequence of statements treated as an expression.
//
// If the `yield` keyword is present, then this block has a value.
Block: ExprNode = {
    "{" <stmts:Statement+> <ret:("yield" <SimpleExpr>)?> "}"
        => ast.block(&stmts, ret.unwrap_or(ast.void.clone())),
    "{" <ret:("yield" <SimpleExpr>)> "}"
	=> ret,
}


// Expression entry point anow, this is the logic operators. This way
// sloppily-parenthesized logic hould do the least surprising thing.
Logic: ExprNode = {
    <a:Logic> "and" <b:Rel> => ast.bin(ast::BinOp::And, a, b),
    <a:Logic> "or"  <b:Rel> => ast.bin(ast::BinOp::Or, a, b),
    <a:Logic> "xor" <b:Rel> => ast.bin(ast::BinOp::Xor, a, b),
    Rel
}


// Relational operators are the next highest precedence.
Rel: ExprNode = {
    <a:Rel> "<"  <b:Sum> => ast.bin(ast::BinOp::Lt, a, b),
    <a:Rel> ">"  <b:Sum> => ast.bin(ast::BinOp::Gt, a, b),
    <a:Rel> "<=" <b:Sum> => ast.bin(ast::BinOp::Lte, a, b),
    <a:Rel> ">=" <b:Sum> => ast.bin(ast::BinOp::Gte, a, b),
    <a:Rel> "==" <b:Sum> => ast.bin(ast::BinOp::Eq, a, b),
    Sum
};


Sum: ExprNode = {
    <a:Sum> "+" <b:Factor> => ast.bin(ast::BinOp::Add, a, b),
    <a:Sum> "-" <b:Factor> => ast.bin(ast::BinOp::Sub, a, b),
    Factor,
};


Factor: ExprNode = {
    <a:Factor> "*" <b:Exp> => ast.bin(ast::BinOp::Mul, a, b),
    <a:Factor> "/" <b:Exp> => ast.bin(ast::BinOp::Div, a, b),
    Exp
};


Exp: ExprNode = {
    <base:Exp> "^" <exp: InvTerm> => ast.bin(ast::BinOp::Pow, base, exp),
    InvTerm
}


// We want these unary operators applied to a function call to do the
// right thing. I.e. -foo() should parse as (- (foo)), not ((- foo)).
//
// The same thing applies to logical negation.
InvTerm: ExprNode = {
    "-" <a:InvTerm> => ast.un(ast::UnOp::Neg, a),
    "not" <a:InvTerm> => ast.un(ast::UnOp::Not, a),
    Call
};


// Allow a function call to consume a trailing block in a statement context.
//
// Concept Inspired by OpenScad and Ruby. The block just gets folded
// into the arguments.
//
// To simplify the grammar, templates are assumed not to return a
// value and are purely used for their effects.
TemplateCall: StmtNode = {
    <func:Selection> "(" <args:ExprList> ")" <delegate:Block>
	=> ast.template_call(func, &args, delegate),
    <func:Selection> "(" <args:ExprList> ")" ";"
        => ast.expr_for_effect(ast.call(func, &args))
};


// We want indexing and selection to bind before function calls, so that
// foo.bar(a) parses as ((dot foo bar) a), not (dot foo (bar a))
Call: ExprNode = {
    <func:Call> "(" <args:ExprList> ")" => ast.call(func, &args),
    Selection
}


// XXX: see github issue #13
Selection: ExprNode = {
    <obj:Selection> "." <id:Id> => ast.dot(obj, id),
    <obj:Selection> "[" <e:Expr> "]" => ast.index(obj, e),
    Term
}


// Literals of any type except lambdas.
Term: ExprNode = {
    "self" => ast.this.clone(),
    "in" => ast.in_.clone(),
    Id => ast.id(<>),
    Int => ast.i(<>),
    Float => ast.f(<>),
    Str => ast.s(<>),
    Boolean => ast.b(<>),
    "(" <a:Expr> ")" => a,
    "[" <l:ExprList> "]" => ast.list(&l),
    "{" <m:MapItems> "}" => ast.map(&m),
};


// A single item in a map.
MapItem: (&'input str, ExprNode) = {
    <k:Str> ":" <v:Logic> => (k, v),
    <k:Id> ":" <v:Logic> => (k, v)
}


// Any commma-separated list of values.
ExprList = Comma<Expr>;


// So far only used in maps.
MapItems = Comma<MapItem>;


// Comma-separated lists of things.
Comma<T>: Vec<T> = {
    <v:(<T> ",")*> <e:T?> => match e {
        None => v,
        Some(e) => {
            let mut v = v;
            v.push(e);
            v
        }
    }
}


// Semicolon-separated lists of things.
Semicolon<T>: Vec<T> = {
    <v:(<T> ";")*> <e:T?> => match e {
        None => v,
        Some(e) => {
            let mut v = v;
            v.push(e);
            v
        }
    }
}


// Terminals
Int: i64              = r"-?[0-9]+" => i64::from_str(<>).unwrap();
Float: f64            = r"-?[0-9]+\.[0-9]+" => f64::from_str(<>).unwrap();
Id: &'input str       = r"[a-z_][A-Za-z0-9_]*" => <>;
TypeName: &'input str = r"[A-Z][A-Za-z0-9_]*" => <>;
Boolean: bool         = {"true" => true, "false" => false};
Str: &'input str      = <s:r#""(([^\\"]|\\.)*)""#> => &s[1..(s.len() - 1)];
